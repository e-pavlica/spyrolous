.pure-g-r
  .pure-u-1-5.side
    %h4 Hi there! What would you like to draw?
    #circle{class:"pure-button typeBtn"} circle
    #rectangle{class:"pure-button typeBtn"} rectangle
    #spyro{class:"pure-button typeBtn"} spyro
    #circleOptions.options
      %h5 Use the slider to adjust your circle:
      %label Radius
      %input{type:"number", id:"circleRadius", class:"numInput", value:"50"}
      %div{id:"radiusSlider"}

    #rectOptions.options
      %h5 Use the sliders to adjust your rectangle:
      %label Height
      %input{type:"number", id:"rectHeight", class:"numInput", value:"50"}
      %div{id:"rectHeightSlider"}

      %label Width
      %input{type:"number", id:"rectWidth", class:"numInput", value:"50"}
      %div{id:"rectWidthSlider"}

    #spyroOptions.options
      %h5 Use the sliders to adjust your spyro:
      %label Outer Circle Radius
      %input{type:"number", id:"spyroRadiusLarge", class:"numInput", value:"100"}
      %div{id:"spyroRadiusLrgSlider"}
      %label Inner Circle Radius
      %input{type:"number", id:"spyroRadiusSmall", class:"numInput", value:"5"}
      %div{id:"spyroRadiusSmlSlider"}
      %label Point on Inner Circle
      %input{type:"number", id:"spyroRho", class:"numInput", value:"50"}
      %div{id:"spyroRhoSlider"}

      %hr
    #colorOptions.options.pure-g-r
      .pure-u-1
        %h5 Add color to your shape:
      .pure-u-1-2
        %label Fill
        %input{type:'text', id:'fillPicker'} 
      .pure-u-1-2
        %label Stroke
        %input{type:'text', id:'strokePicker', value:'#000'}
      .pure-u-1
        %h5 Click on the canvas to place your shape!
      / #layerUpdateBtn{class:'pure-button'} Update
      %hr
    %h4 Share this drawing:
    %a{href:'#', title:'links coming soon!', class:'pure-button'}
      %i{class:'fa fa-link'}
    %a{href:'#', title:'pngs coming soon!', class:'pure-button'}
      %i{class:'fa fa-picture-o'}
    %a{href:'#', title:'social coming soon!', class:'pure-button'}
      %i{class:'fa fa-google-plus'}

    

  .pure-u-4-5
    #snapContainer
      #previewContainer
        %svg{id:'preview'}

<script>
:plain
  // set the canvas id for jQuery calls
  var canvas_id = "#{params[:id]}"
  //set the snap variables so they are available in the global scope
-@canvas.layers.each do |l|
  var l#{l.id};

$(document).ready(function() {

-@canvas.layers.each do |l|
  / each layer will get its own snap svg
  l#{l.id} = Snap(960,960);
  l#{l.id}.node.id = "l#{l.id}";
  $('#snapContainer').append(l#{l.id}.node);
  / hackish way to get layer to be displayed responsively
  l#{l.id}.node.setAttribute('viewBox', '0 0 960 960');
  / get live data back from each layer
  subscribeToLayers(#{l.id});
  /draw circles to the canvas
  -l.circles.each do |c|
    :plain
      l#{l.id}.circle(#{c.x},#{c.y},#{c.radius}).attr(#{c.svg_attributes});
      $('circle').last().attr('circle_id',"#{c.id}");
      $('circle').last().attr('layer_id',"#{l.id}");
  /draw rectangles to the canvas
  -l.rectangles.each do |r|
    :plain
      l#{l.id}.rect(#{r.x},#{r.y},#{r.width},#{r.height}).attr(#{r.svg_attributes});
      $('rect').last().attr('layer_id',"#{l.id}");
      $('rect').last().attr('rect_id',"#{r.id}");
  / draw spyros to the canvas
  -l.spyros.each do |sp|
    :plain
      l#{l.id}.path("#{sp.path}").attr(#{sp.svg_attributes});
      $('path').last().attr('layer_id',"#{l.id}");
      $('path').last().attr('spyro_id',"#{sp.id}");

/ have to call these after svg objects have been loaded
layer_id = #{@canvas.layers.first.id};
initialize();
});
</script>